# ???????? ???????????? ???????
A = [
    [26, -9, -8, 8],
    [9, -21, -2, 8],
    [-3, 2, -18, 8],
    [1, -6, -1, 11]
]

B = [20, -164, 140, -81]

# ??????????? ??????? ? ???? X = B*X + C
n = len(A)
B_matrix = [[0] * n for _ in range(n)]
C_vector = [0] * n

for i in range(n):
    C_vector[i] = B[i] / A[i][i]  # ???????? C
    for j in range(n):
        if i != j:
            B_matrix[i][j] = -A[i][j] / A[i][i]  # ???????? B

# ????????? ???????????
X = [0] * n

# ????????? ????????????? ??????
epsilon = 0.001
max_iterations = 1000

def simple_iteration(B_matrix, C_vector, X, epsilon, max_iterations):
    n = len(B_matrix)
    
    for iteration in range(max_iterations):
        X_new = [0] * n
        
        for i in range(n):
            X_new[i] = sum(B_matrix[i][j] * X[j] for j in range(n)) + C_vector[i]
        
        # ???????? ?? ??????????
        diff = max(abs(X_new[i] - X[i]) for i in range(n))
        if diff < epsilon:
            return X_new, iteration + 1
        
        X = X_new  # ????????? X
    
    raise ValueError("The method did not converge for the given number of iterations")

# ?????? ??????
try:
    solution, iterations = simple_iteration(B_matrix, C_vector, X, epsilon, max_iterations)
    print(f"Solution: {solution}")
    print(f"Count of iterations: {iterations}")
except ValueError as e:
    print(e)
